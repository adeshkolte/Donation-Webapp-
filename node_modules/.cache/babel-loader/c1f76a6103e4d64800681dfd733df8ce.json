{"ast":null,"code":"import _Modal from \"antd/es/modal\";\nimport _Input from \"antd/es/input\";\nimport _AutoComplete from \"antd/es/auto-complete\";\nimport _Row from \"antd/es/row\";\nimport _Col from \"antd/es/col\";\nimport _Descriptions from \"antd/es/descriptions\";\nimport _Table from \"antd/es/table\";\nimport _Button from \"antd/es/button\";\nimport _message from \"antd/es/message\";\nimport _Typography from \"antd/es/typography\";\nvar _jsxFileName = \"/home/ad3sh/Documents/client/src/components/midAuth.jsx\";\nimport React from 'react';\nimport { UserOutlined } from '@ant-design/icons';\nimport sha256 from \"crypto-js/sha256\";\nimport CryptoJS from \"crypto-js\";\nconst {\n  Title,\n  Paragraph,\n  Text\n} = _Typography;\nconst data = [// { key: 2, purpose: 'dskjhd 2', value: 315, authority: 'sdfdf', result: '', address: ''},\n  // { key: 3, purpose: 'dskjhd 3', value: 5885, authority: 'sddfs', result: '', address: ''}\n];\nlet tokenkeys; // const authorities = [\n//     { value: 'user1' },\n//     { value: 'aman123' },\n//     { value: 'user2' }\n// ]\n// data: data, purpose: '', value: '', authority: '',\n// result: '', address: '', authName: '', authAddr: '',\n// transferVisible: false, transferValue: '', transferPurpose: '', transferAuthority: '',\n// uploadVisible: false, uploadResult: '', uploadAddr: '',\n// labels: [],\n// mapAuthNametoAddress: {}, tokensAtThisAddress: {}\n\nclass MidAuth extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.call = () => {\n      const {\n        accounts,\n        contract\n      } = this.props.web3;\n      let initialState = {\n        data: [],\n        purpose: '',\n        fund: '',\n        rowkey: '',\n        transferVisible: false,\n        paymentVisible: false,\n        labels: [],\n        mapAuthNametoAddress: {},\n        tokensAtThisAddress: {}\n      };\n      this.setState(initialState);\n      console.log(accounts[0]);\n\n      try {\n        let l = [];\n        let map = {};\n        contract.methods.getAllListedAuthAddress().call({\n          from: accounts[0],\n          gas: 3000000\n        }).then(result => {\n          let i;\n          console.log(result);\n\n          for (i = 0; i < result.length; i++) {\n            let temp = result[i];\n            contract.methods.getSingleAuthDetails(temp).call({\n              from: accounts[0],\n              gas: 3000000\n            }).then(result => {\n              l.push({\n                'value': result['name']\n              });\n              map[result['name']] = temp;\n            });\n          }\n        });\n        this.setState({\n          labels: l\n        });\n        this.setState({\n          mapAuthNametoAddress: map\n        });\n        contract.methods.getAllTokenKeys().call({\n          from: accounts[0],\n          gas: 3000000\n        }).then(result => {\n          tokenkeys = result;\n        }).then(() => {\n          let i = 0;\n          let promises = [];\n\n          for (i = 0; i < tokenkeys.length; i++) {\n            let value = tokenkeys[i];\n            promises.push(contract.methods.getSingleTokenDetails(value).call({\n              from: accounts[0],\n              gas: 3000000\n            }).then(result => {\n              console.log(result);\n              let temp;\n              temp = result.CompleteHistoryOfToken; //console.log(result.CompleteHistoryOfToken);\n\n              if (accounts[0].toLowerCase() == temp[temp.length - 1]._owner.toLowerCase()) {\n                console.log(temp);\n                let t = this.state.tokensAtThisAddress;\n\n                if (!t.hasOwnProperty(temp[temp.length - 1].purpose)) {\n                  t[temp[temp.length - 1].purpose] = [];\n                }\n\n                t[temp[temp.length - 1].purpose].push({\n                  \"key\": value,\n                  \"value\": temp[temp.length - 1].value\n                });\n                this.setState({\n                  tokensAtThisAddress: t\n                });\n              }\n            }));\n          }\n\n          Promise.all(promises).then(() => {\n            console.log(this.state.tokensAtThisAddress);\n\n            for (var key in this.state.tokensAtThisAddress) {\n              if (this.state.tokensAtThisAddress.hasOwnProperty(key)) {\n                let total = 0;\n                let i = 0;\n                let perpurposeT = this.state.tokensAtThisAddress[key];\n\n                for (i = 0; i < perpurposeT.length; i++) {\n                  total = total + parseInt(perpurposeT[i].value);\n                }\n\n                let d = this.state.data;\n                d.push({\n                  'key': 1,\n                  'purpose': key,\n                  'value': total\n                });\n                this.setState({\n                  'data': [...d]\n                });\n              }\n            }\n          });\n        });\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        _message.error('Sorry TX was not successful Please refer console');\n\n        console.log('sad');\n        console.error(error);\n      }\n    };\n\n    this.componentDidMount = async () => {\n      const {\n        accounts,\n        contract\n      } = this.props.web3;\n      let initialState = {\n        data: [],\n        purpose: '',\n        fund: '',\n        rowkey: '',\n        nextpurpose: ' ',\n        transfervalue: '',\n        nextAuth: '',\n        reason: ' ',\n        payeeaddress: '',\n        paymentValue: '',\n        payeename: '',\n        authName: '',\n        authAddr: '',\n        transferVisible: false,\n        paymentVisible: false,\n        labels: [],\n        mapAuthNametoAddress: {},\n        tokensAtThisAddress: {}\n      };\n      this.setState(initialState);\n      console.log(accounts[0]);\n\n      try {\n        let l = [];\n        let map = {};\n        contract.methods.getAllListedAuthAddress().call({\n          from: accounts[0],\n          gas: 3000000\n        }).then(result => {\n          let i;\n          console.log(result);\n\n          for (i = 0; i < result.length; i++) {\n            let temp = result[i];\n            contract.methods.getSingleAuthDetails(temp).call({\n              from: accounts[0],\n              gas: 3000000\n            }).then(result => {\n              l.push({\n                'value': result['name']\n              });\n              map[result['name']] = temp;\n            });\n          }\n        });\n        this.setState({\n          labels: l\n        });\n        this.setState({\n          mapAuthNametoAddress: map\n        });\n        contract.methods.getAllTokenKeys().call({\n          from: accounts[0],\n          gas: 3000000\n        }).then(result => {\n          tokenkeys = result;\n        }).then(() => {\n          let i = 0;\n          let promises = [];\n\n          for (i = 0; i < tokenkeys.length; i++) {\n            let value = tokenkeys[i];\n            promises.push(contract.methods.getSingleTokenDetails(value).call({\n              from: accounts[0],\n              gas: 3000000\n            }).then(result => {\n              console.log(result);\n              let temp;\n              temp = result.CompleteHistoryOfToken; //console.log(result.CompleteHistoryOfToken);\n\n              if (accounts[0].toLowerCase() == temp[temp.length - 1]._owner.toLowerCase()) {\n                console.log(temp);\n                let t = this.state.tokensAtThisAddress;\n\n                if (!t.hasOwnProperty(temp[temp.length - 1].purpose)) {\n                  t[temp[temp.length - 1].purpose] = [];\n                }\n\n                t[temp[temp.length - 1].purpose].push({\n                  \"key\": value,\n                  \"value\": temp[temp.length - 1].value\n                });\n                this.setState({\n                  tokensAtThisAddress: t\n                });\n              }\n            }));\n          }\n\n          Promise.all(promises).then(() => {\n            console.log(this.state.tokensAtThisAddress);\n\n            for (var key in this.state.tokensAtThisAddress) {\n              if (this.state.tokensAtThisAddress.hasOwnProperty(key)) {\n                let total = 0;\n                let i = 0;\n                let perpurposeT = this.state.tokensAtThisAddress[key];\n\n                for (i = 0; i < perpurposeT.length; i++) {\n                  total = total + parseInt(perpurposeT[i].value);\n                }\n\n                let d = this.state.data;\n                d.push({\n                  'key': 1,\n                  'purpose': key,\n                  'value': total\n                });\n                this.setState({\n                  'data': [...d]\n                });\n              }\n            }\n          });\n        });\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        _message.error('Sorry TX was not successful Please refer console');\n\n        console.log('sad');\n        console.error(error);\n      }\n    };\n\n    this.handleAddAuth = () => {\n      if (this.ifexists(this.state.authAddr, this.state.authName)) {\n        console.log(this.state.authName, this.state.authAddr);\n\n        try {\n          const {\n            accounts,\n            contract\n          } = this.props.web3;\n          contract.methods.addAuthority(this.state.authName, this.state.authAddr).send({\n            from: accounts[0],\n            gas: 3000000\n          }).then(receipt => {\n            _message.success('New Authority Added Succesfully');\n\n            console.log(receipt);\n            let t = this.state.labels;\n            t.push({\n              'value': this.state.authName\n            });\n            this.setState({\n              labels: t\n            });\n            let t2 = this.state.mapAuthNametoAddress;\n            t2[this.state.authName] = this.state.authAddr;\n            this.setState({\n              mapAuthNametoAddress: t2\n            });\n            this.setState({\n              authName: '',\n              authAddr: ''\n            });\n          });\n        } catch (error) {\n          // Catch any errors for any of the above operations.\n          _message.error('Sorry TX was not successful Please refer console');\n\n          console.log('sad');\n          console.error(error);\n        }\n\n        this.toggleModalVisible(false, 'authVisible');\n      }\n    };\n\n    this.handleTransfer = record => {\n      console.log(record);\n      this.setState({\n        transferVisible: true,\n        purpose: record.purpose,\n        funds: record.value,\n        rowkey: record.key\n      });\n    };\n\n    this.handlePayment = record => {\n      console.log(record);\n      this.setState({\n        paymentVisible: true,\n        purpose: record.purpose,\n        funds: record.value,\n        rowkey: record.key\n      });\n    };\n\n    this.handleSubmitTransfer = () => {\n      try {\n        const {\n          accounts,\n          contract\n        } = this.props.web3;\n\n        if (this.state.transferValue > this.state.tokensAtThisAddress[this.state.purpose]) {\n          _message.error('Insufficient Balance');\n        } else {\n          let i = 0;\n          let breakp;\n          let temp = 0;\n          let aim = this.state.transferValue;\n          let currentbalance = this.state.funds;\n          let y = this.state.tokensAtThisAddress[this.state.purpose];\n\n          for (i = 0; i < y.length; i++) {\n            temp = temp + parseInt(y[i].value);\n            console.log(temp);\n\n            if (temp >= aim) {\n              breakp = i;\n              break;\n            }\n          }\n\n          console.log(temp);\n\n          if (temp == aim) {\n            let k;\n            let promises = [];\n\n            for (k = 0; k <= breakp; k++) {\n              promises.push(new Promise((resolve, reject) => {\n                contract.methods.transferToken(y[k].key, '1', this.state.nextAuth, this.state.nextpurpose, this.state.mapAuthNametoAddress[this.state.nextAuth]).send({\n                  from: accounts[0],\n                  gas: 3000000\n                }).then(receipt => {\n                  if (k == 0) {\n                    let newbal = this.state.funds - parseInt(aim);\n                    let d = this.state.data;\n                    d[parseInt(this.state.rowkey) - 1].value = newbal;\n                    this.setState({\n                      data: [d]\n                    });\n                    console.log(receipt);\n                  }\n                }).then(() => {\n                  resolve();\n                });\n              }));\n            }\n\n            Promise.all(promises).then(() => {\n              this.call();\n              this.setState({\n                transferVisible: false\n              });\n            });\n          } else if (temp > aim) {\n            _message.success('There will be 2 TXs as we have to break the token in this case');\n\n            let t = temp - aim;\n            let requiredvaluedtoken = y[breakp].value - t;\n            let uhash = sha256(accounts[0] + requiredvaluedtoken + Date.now());\n            uhash = uhash.toString(CryptoJS.enc.Hex);\n            contract.methods.breakToken(y[breakp].key, requiredvaluedtoken, \"0x\" + uhash).send({\n              from: accounts[0],\n              gas: 3000000\n            }).then(() => {\n              let newbal = this.state.funds - parseInt(aim);\n              let k;\n              let promises = [];\n\n              for (k = 0; k <= breakp; k++) {\n                promises.push(new Promise((resolve, reject) => {\n                  contract.methods.transferToken(y[k].key, '1', this.state.nextAuth, this.state.nextpurpose, this.state.mapAuthNametoAddress[this.state.nextAuth]).send({\n                    from: accounts[0],\n                    gas: 3000000\n                  }).then(receipt => {\n                    if (k == 0) {\n                      let d = this.state.data;\n                      d[parseInt(this.state.rowkey) - 1].value = newbal;\n                      this.setState({\n                        data: [d]\n                      });\n                      console.log(receipt);\n                    }\n                  }).then(() => {\n                    resolve();\n                  });\n                }));\n              }\n\n              Promise.all(promises).then(() => {\n                this.call();\n                this.setState({\n                  transferVisible: false\n                });\n              });\n            });\n          }\n        }\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        _message.error('Sorry TX was not successful Please refer console');\n\n        console.log('sad');\n        console.error(error);\n      } // if (false) {\n      //     // if the operation is unsuccessful\n      //     message.error('The Operation was unsuccessful');\n      // }\n\n    };\n\n    this.handlePaymentTransfer = () => {\n      try {\n        const {\n          accounts,\n          contract\n        } = this.props.web3;\n\n        if (parseInt(this.state.paymentValue) > this.state.tokensAtThisAddress[this.state.purpose]) {\n          _message.error('Insufficient Balance');\n        } else {\n          let i = 0;\n          let breakp;\n          let temp = 0;\n          let aim = parseInt(this.state.paymentValue);\n          let y = this.state.tokensAtThisAddress[this.state.purpose];\n\n          for (i = 0; i < y.length; i++) {\n            temp = temp + parseInt(y[i].value);\n            console.log(temp);\n\n            if (temp >= aim) {\n              breakp = i;\n              break;\n            }\n          }\n\n          console.log(this.state.paymentValue);\n\n          if (temp == aim) {\n            let k;\n            console.log(y);\n            let promises = [];\n\n            for (k = 0; k <= breakp; k++) {\n              promises.push(new Promise((resolve, reject) => {\n                contract.methods.paymentToLeaf(y[k].key, this.state.payeeaddress, this.state.payeename, this.state.reason).send({\n                  from: accounts[0],\n                  gas: 3000000,\n                  value: y[k].value\n                }).then(() => {\n                  if (k == 0) {\n                    let newbal = this.state.funds - parseInt(aim);\n                    let d = this.state.data;\n                    d[parseInt(this.state.rowkey) - 1].value = newbal;\n                    this.setState({\n                      data: [d]\n                    });\n                  }\n                }).then(() => {\n                  resolve();\n                });\n              }));\n            }\n\n            Promise.all(promises).then(() => {\n              this.call();\n              this.setState({\n                paymentVisible: false\n              });\n            });\n          } else if (temp > aim) {\n            _message.success('There will be 2 TXs as we have to break the token in this case');\n\n            let t = temp - aim;\n            let requiredvaluedtoken = y[breakp].value - t;\n            console.log(requiredvaluedtoken);\n            let uhash = sha256(accounts[0] + requiredvaluedtoken + Date.now());\n            uhash = uhash.toString(CryptoJS.enc.Hex);\n            contract.methods.breakToken(y[breakp].key, requiredvaluedtoken, \"0x\" + uhash).send({\n              from: accounts[0],\n              gas: 3000000\n            }).then(() => {\n              let newbal = this.state.funds - parseInt(aim);\n              let k;\n              let promises = [];\n\n              for (k = 0; k <= breakp; k++) {\n                let value = y[k].value;\n                if (k == breakp) value = requiredvaluedtoken;\n                console.log(t);\n                promises.push(new Promise((resolve, reject) => {\n                  contract.methods.paymentToLeaf(y[k].key, this.state.payeeaddress, this.state.payeename, this.state.reason).send({\n                    from: accounts[0],\n                    gas: 3000000,\n                    value: value\n                  }).then(() => {\n                    if (k == 0) {\n                      let newbal = this.state.funds - parseInt(aim);\n                      let d = this.state.data;\n                      d[parseInt(this.state.rowkey) - 1].value = newbal;\n                      this.setState({\n                        data: [d]\n                      });\n                    }\n                  }).then(() => {\n                    resolve();\n                  });\n                }));\n              }\n\n              Promise.all(promises).then(() => {\n                this.call();\n                this.setState({\n                  paymentVisible: false\n                });\n              });\n            });\n          }\n        }\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        _message.error('Sorry TX was not successful Please refer console');\n\n        console.log('sad');\n        console.error(error);\n      }\n    };\n\n    this.handleChange = (e, name) => {\n      if (name == 'nextAuth') this.setState({\n        [name]: e\n      });else this.setState({\n        [name]: e.target.value\n      });\n    };\n\n    this.toggleModalVisible = (bool, type) => {\n      this.setState({\n        [type]: bool\n      });\n    };\n\n    this.state = {\n      data: [],\n      purpose: '',\n      fund: '',\n      rowkey: '',\n      nextpurpose: ' ',\n      transfervalue: '',\n      nextAuth: '',\n      reason: ' ',\n      payeeaddress: '',\n      paymentValue: '',\n      payeename: '',\n      authName: '',\n      authAddr: '',\n      transferVisible: false,\n      paymentVisible: false,\n      labels: [],\n      mapAuthNametoAddress: {},\n      tokensAtThisAddress: {}\n    };\n  }\n\n  ifexists(add, name) {\n    let i = 0;\n\n    if (this.state.mapAuthNametoAddress.hasOwnProperty(name)) {\n      _message.error(\"Given Authority Name is Already Registered\");\n\n      return false;\n    }\n\n    for (const [key, value] of Object.entries(this.state.mapAuthNametoAddress)) {\n      if (add == value) {\n        _message.error(\"Given Authority Address is Already Registered\");\n\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  refreshPage() {\n    window.location.reload(false);\n  }\n\n  render() {\n    const columns = [{\n      title: 'Purpose',\n      dataIndex: 'purpose',\n      key: 'purpose'\n    }, {\n      title: 'Remaining Funds',\n      dataIndex: 'value',\n      key: 'value'\n    }, {\n      title: 'Actions',\n      key: 'Actions',\n      render: (text, record) => {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 551,\n            columnNumber: 28\n          }\n        }, /*#__PURE__*/React.createElement(_Button, {\n          size: \"small\",\n          className: \"buttons\",\n          type: \"primary\",\n          onClick: () => this.handleTransfer(record),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 552,\n            columnNumber: 25\n          }\n        }, \"Transfer\"), /*#__PURE__*/React.createElement(_Button, {\n          size: \"small\",\n          className: \"buttons\",\n          type: \"primary\",\n          onClick: () => this.handlePayment(record),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 553,\n            columnNumber: 25\n          }\n        }, \"Payment\"));\n      }\n    }];\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"root-auth\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 559,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(_Row, {\n      justify: \"space-around\",\n      align: \"middle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 560,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(_Col, {\n      xs: 23,\n      sm: 22,\n      md: 20,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 561,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(_Table, {\n      title: () => /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          textAlign: 'left',\n          fontSize: '20px',\n          fontFamily: '\"Open Sans\", sans-serif'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 563,\n          columnNumber: 45\n        }\n      }, this.props.midAuthName),\n      bordered: true,\n      style: {\n        overflowX: 'auto'\n      },\n      columns: columns,\n      dataSource: this.state.data,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 563,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 563,\n        columnNumber: 257\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 563,\n        columnNumber: 263\n      }\n    }), /*#__PURE__*/React.createElement(_Button, {\n      type: \"primary\",\n      onClick: () => this.toggleModalVisible(true, 'authVisible'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 564,\n        columnNumber: 25\n      }\n    }, \"Add Authority\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 565,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 565,\n        columnNumber: 31\n      }\n    }), \"  \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 565,\n        columnNumber: 39\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 565,\n        columnNumber: 45\n      }\n    }), \"  \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 565,\n        columnNumber: 53\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 565,\n        columnNumber: 59\n      }\n    }), \"  \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 565,\n        columnNumber: 67\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 565,\n        columnNumber: 73\n      }\n    }), /*#__PURE__*/React.createElement(_Descriptions, {\n      bordered: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 566,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(_Descriptions.Item, {\n      label: \"Transfer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 567,\n        columnNumber: 29\n      }\n    }, \"To Transfer funds to other authorities.\"), /*#__PURE__*/React.createElement(_Descriptions.Item, {\n      label: \"Payment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 568,\n        columnNumber: 29\n      }\n    }, \"To pay amount to vendor/contractor/..(leaf nodes).\"), /*#__PURE__*/React.createElement(_Descriptions.Item, {\n      label: \"Add Authority\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 569,\n        columnNumber: 29\n      }\n    }, \"To add branch authority.\"), /*#__PURE__*/React.createElement(_Descriptions.Item, {\n      label: \"Breaking the token\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 570,\n        columnNumber: 29\n      }\n    }, \"  \", /*#__PURE__*/React.createElement(Text, {\n      type: \"secondary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 570,\n        columnNumber: 77\n      }\n    }, \"Please note that if we have to break the token during Transfer/Payment, there are 2 transactions : 1)Breaking the token , 2)Transfer/Payment.\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 571,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(Text, {\n      type: \"secondary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 572,\n        columnNumber: 33\n      }\n    }, \"Please\"), \"  \", /*#__PURE__*/React.createElement(Text, {\n      type: \"danger\",\n      strong: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 572,\n        columnNumber: 71\n      }\n    }, \"confirm both transactions\"), \"  \", /*#__PURE__*/React.createElement(Text, {\n      type: \"secondary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 572,\n        columnNumber: 132\n      }\n    }, \"from wallet provider.\"))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 574,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 574,\n        columnNumber: 31\n      }\n    }))), /*#__PURE__*/React.createElement(_Modal, {\n      title: \"Transfer\",\n      visible: this.state.transferVisible,\n      onOk: this.handleSubmitTransfer,\n      onCancel: () => this.toggleModalVisible(false, 'transferVisible'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 580,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(_AutoComplete, {\n      style: {\n        width: '100%'\n      },\n      options: this.state.labels,\n      placeholder: \"Payee Authority\",\n      prefix: /*#__PURE__*/React.createElement(UserOutlined, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 592,\n          columnNumber: 33\n        }\n      }),\n      filterOption: (inputValue, option) => option.value.toUpperCase().indexOf(inputValue.toUpperCase()) !== -1,\n      value: this.state.nextAuth,\n      onChange: e => this.handleChange(e, 'nextAuth'),\n      name: \"nextAuth\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 586,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 598,\n        columnNumber: 43\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 598,\n        columnNumber: 49\n      }\n    }), /*#__PURE__*/React.createElement(_Input, {\n      name: \"transferPurpose\",\n      onChange: e => this.handleChange(e, 'nextpurpose'),\n      placeholder: \"Purpose of this transfer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 599,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 599,\n        columnNumber: 146\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 599,\n        columnNumber: 152\n      }\n    }), /*#__PURE__*/React.createElement(_Input, {\n      name: \"transferValue\",\n      onChange: e => this.handleChange(e, 'transferValue'),\n      placeholder: \"Value in Wei\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 600,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 600,\n        columnNumber: 134\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 600,\n        columnNumber: 140\n      }\n    })), /*#__PURE__*/React.createElement(_Modal, {\n      title: \"Payment\",\n      visible: this.state.paymentVisible,\n      onOk: this.handlePaymentTransfer,\n      onCancel: () => this.toggleModalVisible(false, 'paymentVisible'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 603,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(_Input, {\n      name: \"payeename\",\n      onChange: e => this.handleChange(e, 'payeename'),\n      placeholder: \"Payee Name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 609,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 609,\n        columnNumber: 124\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 609,\n        columnNumber: 130\n      }\n    }), /*#__PURE__*/React.createElement(_Input, {\n      name: \"Reason\",\n      onChange: e => this.handleChange(e, 'reason'),\n      placeholder: \"Payment Reason\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 610,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 610,\n        columnNumber: 122\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 610,\n        columnNumber: 128\n      }\n    }), /*#__PURE__*/React.createElement(_Input, {\n      name: \"payeeaddress\",\n      onChange: e => this.handleChange(e, 'payeeaddress'),\n      placeholder: \"Payee Address\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 611,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 611,\n        columnNumber: 133\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 611,\n        columnNumber: 139\n      }\n    }), /*#__PURE__*/React.createElement(_Input, {\n      name: \"paymentValue\",\n      onChange: e => this.handleChange(e, 'paymentValue'),\n      placeholder: \"Value in Wei\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 612,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 612,\n        columnNumber: 132\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 612,\n        columnNumber: 138\n      }\n    })), /*#__PURE__*/React.createElement(_Modal, {\n      title: \"Add Authority\",\n      visible: this.state.authVisible,\n      onOk: this.handleAddAuth,\n      onCancel: () => this.toggleModalVisible(false, 'authVisible'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 615,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(_Input, {\n      name: \"authName\",\n      onChange: e => this.handleChange(e, 'authName'),\n      placeholder: \"Name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 621,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 621,\n        columnNumber: 116\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 621,\n        columnNumber: 122\n      }\n    }), /*#__PURE__*/React.createElement(_Input, {\n      name: \"authAddr\",\n      onChange: e => this.handleChange(e, 'authAddr'),\n      placeholder: \"Address\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 622,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 622,\n        columnNumber: 119\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 622,\n        columnNumber: 125\n      }\n    })));\n  }\n\n}\n\nexport default MidAuth;","map":{"version":3,"sources":["/home/ad3sh/Documents/client/src/components/midAuth.jsx"],"names":["React","UserOutlined","sha256","CryptoJS","Title","Paragraph","Text","data","tokenkeys","MidAuth","Component","constructor","props","call","accounts","contract","web3","initialState","purpose","fund","rowkey","transferVisible","paymentVisible","labels","mapAuthNametoAddress","tokensAtThisAddress","setState","console","log","l","map","methods","getAllListedAuthAddress","from","gas","then","result","i","length","temp","getSingleAuthDetails","push","getAllTokenKeys","promises","value","getSingleTokenDetails","CompleteHistoryOfToken","toLowerCase","_owner","t","state","hasOwnProperty","Promise","all","key","total","perpurposeT","parseInt","d","error","componentDidMount","nextpurpose","transfervalue","nextAuth","reason","payeeaddress","paymentValue","payeename","authName","authAddr","handleAddAuth","ifexists","addAuthority","send","receipt","success","t2","toggleModalVisible","handleTransfer","record","funds","handlePayment","handleSubmitTransfer","transferValue","breakp","aim","currentbalance","y","k","resolve","reject","transferToken","newbal","requiredvaluedtoken","uhash","Date","now","toString","enc","Hex","breakToken","handlePaymentTransfer","paymentToLeaf","handleChange","e","name","target","bool","type","add","Object","entries","refreshPage","window","location","reload","render","columns","title","dataIndex","text","textAlign","fontSize","fontFamily","midAuthName","overflowX","width","inputValue","option","toUpperCase","indexOf","authVisible"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Modal, Button, Row, Col, AutoComplete, Table, message, Input } from 'antd';\nimport { UserOutlined } from '@ant-design/icons';\nimport { Spin } from 'antd';\nimport sha256 from \"crypto-js/sha256\";\nimport CryptoJS from \"crypto-js\";\nimport { Typography, Space } from 'antd';\nimport { Descriptions } from 'antd';\n\nconst { Title, Paragraph, Text } = Typography;\n\nconst data = [\n\n    // { key: 2, purpose: 'dskjhd 2', value: 315, authority: 'sdfdf', result: '', address: ''},\n    // { key: 3, purpose: 'dskjhd 3', value: 5885, authority: 'sddfs', result: '', address: ''}\n]\nlet tokenkeys;\n// const authorities = [\n//     { value: 'user1' },\n//     { value: 'aman123' },\n//     { value: 'user2' }\n// ]\n// data: data, purpose: '', value: '', authority: '',\n// result: '', address: '', authName: '', authAddr: '',\n// transferVisible: false, transferValue: '', transferPurpose: '', transferAuthority: '',\n// uploadVisible: false, uploadResult: '', uploadAddr: '',\n// labels: [],\n// mapAuthNametoAddress: {}, tokensAtThisAddress: {}\nclass MidAuth extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: [], purpose: '', fund: '', rowkey: '',\n            nextpurpose: ' ', transfervalue: '', nextAuth: '',\n            reason: ' ', payeeaddress: '', paymentValue: '', payeename: '',\n            authName: '', authAddr: '',\n            transferVisible: false,\n            paymentVisible: false,\n            labels: [],\n            mapAuthNametoAddress: {}, tokensAtThisAddress: {}\n        }\n    }\n\n    call = () => {\n        const { accounts, contract } = this.props.web3;\n\n        let initialState = {\n            data: [], purpose: '', fund: '', rowkey: '',\n            transferVisible: false,\n            paymentVisible: false,\n            labels: [],\n            mapAuthNametoAddress: {}, tokensAtThisAddress: {}\n        };\n        this.setState(initialState);\n        console.log(accounts[0]);\n        try {\n\n\n            let l = [];\n            let map = {};\n            contract.methods.getAllListedAuthAddress().call({ from: accounts[0], gas: 3000000 })\n                .then((result) => {\n\n                    let i;\n                    console.log(result);\n                    for (i = 0; i < result.length; i++) {\n                        let temp = result[i];\n                        contract.methods.getSingleAuthDetails(temp).call({ from: accounts[0], gas: 3000000 })\n                            .then((result) => {\n                                l.push({ 'value': result['name'] })\n                                map[result['name']] = temp;\n                            })\n\n                    }\n\n                })\n            this.setState({ labels: l })\n            this.setState({ mapAuthNametoAddress: map })\n\n            contract.methods.getAllTokenKeys().call({ from: accounts[0], gas: 3000000 })\n                .then((result) => {\n                    tokenkeys = result\n                })\n                .then(() => {\n                    let i = 0;\n                    let promises = [];\n                    for (i = 0; i < tokenkeys.length; i++) {\n                        let value = tokenkeys[i];\n                        promises.push(\n                            contract.methods.getSingleTokenDetails(value).call({ from: accounts[0], gas: 3000000 })\n                                .then((result) => {\n\n                                    console.log(result);\n                                    let temp\n                                    temp = result.CompleteHistoryOfToken;\n                                    //console.log(result.CompleteHistoryOfToken);\n                                    if (accounts[0].toLowerCase() == (temp[temp.length - 1]._owner).toLowerCase()) {\n\n                                        console.log(temp)\n                                        let t = this.state.tokensAtThisAddress;\n                                        if (!t.hasOwnProperty(temp[temp.length - 1].purpose)) {\n                                            t[temp[temp.length - 1].purpose] = [];\n                                        }\n                                        t[temp[temp.length - 1].purpose].push({ \"key\": value, \"value\": temp[temp.length - 1].value });\n                                        this.setState({ tokensAtThisAddress: t });\n                                    }\n\n                                }));\n\n\n                    }\n                    Promise.all(promises)\n                        .then(() => {\n                            console.log(this.state.tokensAtThisAddress);\n\n\n                            for (var key in this.state.tokensAtThisAddress) {\n                                if (this.state.tokensAtThisAddress.hasOwnProperty(key)) {\n                                    let total = 0;\n                                    let i = 0;\n                                    let perpurposeT = this.state.tokensAtThisAddress[key];\n                                    for (i = 0; i < perpurposeT.length; i++) {\n                                        total = total + parseInt(perpurposeT[i].value);\n                                    }\n\n                                    let d = this.state.data;\n                                    d.push({ 'key': 1, 'purpose': key, 'value': total })\n                                    this.setState({ 'data': [...d] })\n                                }\n                            }\n\n                        })\n\n                })\n\n\n\n\n\n        } catch (error) {\n            // Catch any errors for any of the above operations.\n            message.error('Sorry TX was not successful Please refer console')\n            console.log('sad');\n            console.error(error);\n        }\n    }\n    componentDidMount = async () => {\n        const { accounts, contract } = this.props.web3;\n\n        let initialState = {\n            data: [], purpose: '', fund: '', rowkey: '',\n            nextpurpose: ' ', transfervalue: '', nextAuth: '',\n            reason: ' ', payeeaddress: '', paymentValue: '', payeename: '',\n            authName: '', authAddr: '',\n            transferVisible: false,\n            paymentVisible: false,\n            labels: [],\n            mapAuthNametoAddress: {}, tokensAtThisAddress: {}\n        };\n        this.setState(initialState);\n        console.log(accounts[0]);\n        try {\n\n\n            let l = [];\n            let map = {};\n            contract.methods.getAllListedAuthAddress().call({ from: accounts[0], gas: 3000000 })\n                .then((result) => {\n\n                    let i;\n                    console.log(result);\n                    for (i = 0; i < result.length; i++) {\n                        let temp = result[i];\n                        contract.methods.getSingleAuthDetails(temp).call({ from: accounts[0], gas: 3000000 })\n                            .then((result) => {\n                                l.push({ 'value': result['name'] })\n                                map[result['name']] = temp;\n                            })\n\n                    }\n\n                })\n            this.setState({ labels: l })\n            this.setState({ mapAuthNametoAddress: map })\n\n            contract.methods.getAllTokenKeys().call({ from: accounts[0], gas: 3000000 })\n                .then((result) => {\n                    tokenkeys = result\n                })\n                .then(() => {\n                    let i = 0;\n                    let promises = [];\n                    for (i = 0; i < tokenkeys.length; i++) {\n                        let value = tokenkeys[i];\n                        promises.push(\n                            contract.methods.getSingleTokenDetails(value).call({ from: accounts[0], gas: 3000000 })\n                                .then((result) => {\n\n                                    console.log(result);\n                                    let temp\n                                    temp = result.CompleteHistoryOfToken;\n                                    //console.log(result.CompleteHistoryOfToken);\n                                    if (accounts[0].toLowerCase() == (temp[temp.length - 1]._owner).toLowerCase()) {\n\n                                        console.log(temp)\n                                        let t = this.state.tokensAtThisAddress;\n                                        if (!t.hasOwnProperty(temp[temp.length - 1].purpose)) {\n                                            t[temp[temp.length - 1].purpose] = [];\n                                        }\n                                        t[temp[temp.length - 1].purpose].push({ \"key\": value, \"value\": temp[temp.length - 1].value });\n                                        this.setState({ tokensAtThisAddress: t });\n                                    }\n\n                                }));\n\n\n                    }\n                    Promise.all(promises)\n                        .then(() => {\n                            console.log(this.state.tokensAtThisAddress);\n\n\n                            for (var key in this.state.tokensAtThisAddress) {\n                                if (this.state.tokensAtThisAddress.hasOwnProperty(key)) {\n                                    let total = 0;\n                                    let i = 0;\n                                    let perpurposeT = this.state.tokensAtThisAddress[key];\n                                    for (i = 0; i < perpurposeT.length; i++) {\n                                        total = total + parseInt(perpurposeT[i].value);\n                                    }\n\n                                    let d = this.state.data;\n                                    d.push({ 'key': 1, 'purpose': key, 'value': total })\n                                    this.setState({ 'data': [...d] })\n                                }\n                            }\n\n                        })\n\n                })\n\n\n\n\n\n        } catch (error) {\n            // Catch any errors for any of the above operations.\n            message.error('Sorry TX was not successful Please refer console')\n            console.log('sad');\n            console.error(error);\n        }\n    };\n\n    ifexists(add, name) {\n        let i = 0;\n\n        if (this.state.mapAuthNametoAddress.hasOwnProperty(name)) {\n            message.error(\"Given Authority Name is Already Registered\");\n            return false;\n        }\n\n        for (const [key, value] of Object.entries(this.state.mapAuthNametoAddress)) {\n            if (add == value) {\n                message.error(\"Given Authority Address is Already Registered\");\n                return false;\n            }\n        }\n        return true;\n    }\n    handleAddAuth = () => {\n\n        if (this.ifexists(this.state.authAddr, this.state.authName)) {\n            console.log(this.state.authName, this.state.authAddr);\n            try {\n                const { accounts, contract } = this.props.web3;\n                contract.methods.addAuthority(this.state.authName, this.state.authAddr).send({ from: accounts[0], gas: 3000000 })\n                    .then((receipt) => {\n\n                        message.success('New Authority Added Succesfully');\n                        console.log(receipt)\n                        let t = this.state.labels\n                        t.push({ 'value': this.state.authName })\n                        this.setState({ labels: t })\n\n                        let t2 = this.state.mapAuthNametoAddress\n                        t2[this.state.authName] = this.state.authAddr\n                        this.setState({ mapAuthNametoAddress: t2 })\n\n                        this.setState({ authName: '', authAddr: '' });\n\n                    })\n\n            } catch (error) {\n                // Catch any errors for any of the above operations.\n                message.error('Sorry TX was not successful Please refer console')\n                console.log('sad');\n                console.error(error);\n            }\n            this.toggleModalVisible(false, 'authVisible')\n        }\n    }\n    handleTransfer = (record) => {\n        console.log(record);\n        this.setState({ transferVisible: true, purpose: record.purpose, funds: record.value, rowkey: record.key });\n    }\n    handlePayment = (record) => {\n        console.log(record);\n        this.setState({ paymentVisible: true, purpose: record.purpose, funds: record.value, rowkey: record.key });\n    }\n    refreshPage() {\n        window.location.reload(false);\n    }\n    handleSubmitTransfer = () => {\n        try {\n            const { accounts, contract } = this.props.web3;\n            if (this.state.transferValue > this.state.tokensAtThisAddress[this.state.purpose]) { message.error('Insufficient Balance'); }\n            else {\n                let i = 0\n                let breakp;\n                let temp = 0;\n                let aim = this.state.transferValue;\n                let currentbalance = this.state.funds;\n\n                let y = this.state.tokensAtThisAddress[this.state.purpose];\n                for (i = 0; i < y.length; i++) {\n\n                    temp = temp + parseInt(y[i].value);\n                    console.log(temp)\n                    if (temp >= aim) {\n                        breakp = i;\n                        break;\n                    }\n                }\n                console.log(temp)\n\n\n                if (temp == aim) {\n\n                    let k;\n                    let promises = [];\n                    for (k = 0; k <= breakp; k++) {\n                        promises.push(\n                            new Promise((resolve, reject) => {\n                                contract.methods.transferToken(y[k].key, '1', this.state.nextAuth, this.state.nextpurpose, this.state.mapAuthNametoAddress[this.state.nextAuth]).send({ from: accounts[0], gas: 3000000 })\n                                    .then((receipt) => {\n                                        if (k == 0) {\n                                            let newbal = this.state.funds - parseInt(aim);\n                                            let d = this.state.data;\n                                            d[parseInt(this.state.rowkey) - 1].value = newbal\n                                            this.setState({ data: [d] });\n                                            console.log(receipt)\n\n                                        }\n                                    }).then(() => { resolve(); })\n                            }))\n                    }\n\n                    Promise.all(promises).then(() => { this.call(); this.setState({ transferVisible: false }); })\n\n\n                }\n                else if (temp > aim) {\n                    message.success('There will be 2 TXs as we have to break the token in this case');\n                    let t = temp - aim;\n                    let requiredvaluedtoken = y[breakp].value - t;\n                    let uhash = sha256(accounts[0] + requiredvaluedtoken + Date.now());\n                    uhash = uhash.toString(CryptoJS.enc.Hex);\n\n\n                    contract.methods.breakToken(y[breakp].key, requiredvaluedtoken, \"0x\" + uhash).send({ from: accounts[0], gas: 3000000 })\n                        .then(() => {\n                            let newbal = this.state.funds - parseInt(aim);\n\n                            let k;\n                            let promises = [];\n                            for (k = 0; k <= breakp; k++) {\n                                promises.push(\n                                    new Promise((resolve, reject) => {\n                                        contract.methods.transferToken(y[k].key, '1', this.state.nextAuth, this.state.nextpurpose, this.state.mapAuthNametoAddress[this.state.nextAuth]).send({ from: accounts[0], gas: 3000000 })\n                                            .then((receipt) => {\n\n                                                if (k == 0) {\n                                                    let d = this.state.data;\n                                                    d[parseInt(this.state.rowkey) - 1].value = newbal\n                                                    this.setState({ data: [d] });\n                                                    console.log(receipt)\n                                                }\n\n                                            }).then(() => {\n                                                resolve();\n                                            })\n                                    }))\n                            }\n\n                            Promise.all(promises).then(() => { this.call(); this.setState({ transferVisible: false }); })\n                        })\n\n                }\n\n            }\n\n\n\n        } catch (error) {\n            // Catch any errors for any of the above operations.\n            message.error('Sorry TX was not successful Please refer console')\n            console.log('sad');\n            console.error(error);\n        }\n\n\n\n        // if (false) {\n        //     // if the operation is unsuccessful\n        //     message.error('The Operation was unsuccessful');\n        // }\n\n\n    }\n\n    handlePaymentTransfer = () => {\n        try {\n            const { accounts, contract } = this.props.web3;\n            if (parseInt(this.state.paymentValue) > this.state.tokensAtThisAddress[this.state.purpose]) { message.error('Insufficient Balance'); }\n            else {\n                let i = 0\n                let breakp;\n                let temp = 0;\n                let aim = parseInt(this.state.paymentValue);\n\n                let y = this.state.tokensAtThisAddress[this.state.purpose];\n                for (i = 0; i < y.length; i++) {\n\n                    temp = temp + parseInt(y[i].value);\n                    console.log(temp)\n                    if (temp >= aim) {\n                        breakp = i;\n                        break;\n                    }\n                }\n                console.log(this.state.paymentValue);\n\n\n                if (temp == aim) {\n\n\n                    let k;\n                    console.log(y);\n                    let promises = [];\n                    for (k = 0; k <= breakp; k++) {\n                        promises.push(\n                            new Promise((resolve, reject) => {\n                                contract.methods.paymentToLeaf(y[k].key, this.state.payeeaddress, this.state.payeename, this.state.reason).send({ from: accounts[0], gas: 3000000, value: y[k].value })\n                                    .then(() => {\n\n                                        if (k == 0) {\n                                            let newbal = this.state.funds - parseInt(aim);\n                                            let d = this.state.data;\n                                            d[parseInt(this.state.rowkey) - 1].value = newbal\n                                            this.setState({ data: [d] });\n\n                                        }\n                                    }).then(() => { resolve(); })\n                            }));\n                    }\n                    Promise.all(promises).then(() => { this.call(); this.setState({ paymentVisible: false }); })\n\n\n\n                }\n                else if (temp > aim) {\n                    message.success('There will be 2 TXs as we have to break the token in this case');\n                    let t = temp - aim;\n                    let requiredvaluedtoken = y[breakp].value - t;\n                    console.log(requiredvaluedtoken);\n                    let uhash = sha256(accounts[0] + requiredvaluedtoken + Date.now());\n                    uhash = uhash.toString(CryptoJS.enc.Hex);\n\n\n                    contract.methods.breakToken(y[breakp].key, requiredvaluedtoken, \"0x\" + uhash).send({ from: accounts[0], gas: 3000000 })\n                        .then(() => {\n                            let newbal = this.state.funds - parseInt(aim);\n\n                            let k;\n                            let promises = [];\n                            for (k = 0; k <= breakp; k++) {\n                                let value = y[k].value;\n                                if (k == breakp) value = requiredvaluedtoken;\n                                console.log(t);\n                                promises.push(\n                                    new Promise((resolve, reject) => {\n                                        contract.methods.paymentToLeaf(y[k].key, this.state.payeeaddress, this.state.payeename, this.state.reason).send({ from: accounts[0], gas: 3000000, value: value })\n                                            .then(() => {\n\n                                                if (k == 0) {\n                                                    let newbal = this.state.funds - parseInt(aim);\n                                                    let d = this.state.data;\n                                                    d[parseInt(this.state.rowkey) - 1].value = newbal\n                                                    this.setState({ data: [d] });\n\n                                                }\n                                            }).then(() => { resolve(); })\n                                    }));\n                            }\n\n                            Promise.all(promises).then(() => { this.call(); this.setState({ paymentVisible: false }); })\n\n                        })\n\n                }\n\n            }\n\n\n\n        } catch (error) {\n            // Catch any errors for any of the above operations.\n            message.error('Sorry TX was not successful Please refer console')\n            console.log('sad');\n            console.error(error);\n        }\n\n\n\n    }\n    handleChange = (e, name) => {\n        if (name == 'nextAuth')\n            this.setState({ [name]: e });\n        else\n            this.setState({ [name]: e.target.value })\n    }\n    toggleModalVisible = (bool, type) => {\n        this.setState({ [type]: bool })\n    }\n    render() {\n        const columns = [\n            {\n                title: 'Purpose',\n                dataIndex: 'purpose',\n                key: 'purpose',\n            },\n            {\n                title: 'Remaining Funds',\n                dataIndex: 'value',\n                key: 'value',\n            },\n            {\n                title: 'Actions',\n                key: 'Actions',\n                render: (text, record) => {\n                    return <div >\n                        <Button size=\"small\" className=\"buttons\" type=\"primary\" onClick={() => this.handleTransfer(record)}>Transfer</Button>\n                        <Button size=\"small\" className=\"buttons\" type=\"primary\" onClick={() => this.handlePayment(record)}>Payment</Button>\n                    </div>\n                }\n            },\n        ];\n        return (\n            <div className=\"root-auth\">\n                <Row justify=\"space-around\" align=\"middle\">\n                    <Col xs={23} sm={22} md={20}>\n\n                        <Table title={() => <div style={{ textAlign: 'left', fontSize: '20px', fontFamily: '\"Open Sans\", sans-serif' }}>{this.props.midAuthName}</div>} bordered style={{ overflowX: 'auto' }} columns={columns} dataSource={this.state.data} /><br /><br />\n                        <Button type=\"primary\" onClick={() => this.toggleModalVisible(true, 'authVisible')}>Add Authority</Button>\n                        <br /><br />  <br /><br />  <br /><br />  <br /><br />\n                        <Descriptions bordered>\n                            <Descriptions.Item label=\"Transfer\">To Transfer funds to other authorities.</Descriptions.Item>\n                            <Descriptions.Item label=\"Payment\">To pay amount to vendor/contractor/..(leaf nodes).</Descriptions.Item>\n                            <Descriptions.Item label=\"Add Authority\">To add branch authority.</Descriptions.Item>\n                            <Descriptions.Item label=\"Breaking the token\">  <Text type=\"secondary\">Please note that if we have to break the token during Transfer/Payment, there are 2 transactions : 1)Breaking the token , 2)Transfer/Payment.</Text>\n                                <br />\n                                <Text type=\"secondary\">Please</Text>  <Text type=\"danger\" strong>confirm both transactions</Text>  <Text type=\"secondary\">from wallet provider.</Text></Descriptions.Item>\n                        </Descriptions>\n                        <br /><br />\n\n\n                    </Col>\n                </Row>\n\n                <Modal\n                    title='Transfer'\n                    visible={this.state.transferVisible}\n                    onOk={this.handleSubmitTransfer}\n                    onCancel={() => this.toggleModalVisible(false, 'transferVisible')}\n                >\n                    <AutoComplete\n                        style={{\n                            width: '100%',\n                        }}\n                        options={this.state.labels}\n                        placeholder=\"Payee Authority\"\n                        prefix={<UserOutlined />}\n                        filterOption={(inputValue, option) =>\n                            option.value.toUpperCase().indexOf(inputValue.toUpperCase()) !== -1\n                        }\n                        value={this.state.nextAuth}\n                        onChange={(e) => this.handleChange(e, 'nextAuth')}\n                        name='nextAuth' /><br /><br />\n                    <Input name='transferPurpose' onChange={(e) => this.handleChange(e, 'nextpurpose')} placeholder='Purpose of this transfer' /><br /><br />\n                    <Input name='transferValue' onChange={(e) => this.handleChange(e, 'transferValue')} placeholder='Value in Wei' /><br /><br />\n                </Modal>\n\n                <Modal\n                    title='Payment'\n                    visible={this.state.paymentVisible}\n                    onOk={this.handlePaymentTransfer}\n                    onCancel={() => this.toggleModalVisible(false, 'paymentVisible')}\n                >\n                    <Input name='payeename' onChange={(e) => this.handleChange(e, 'payeename')} placeholder='Payee Name' /><br /><br />\n                    <Input name='Reason' onChange={(e) => this.handleChange(e, 'reason')} placeholder='Payment Reason' /><br /><br />\n                    <Input name='payeeaddress' onChange={(e) => this.handleChange(e, 'payeeaddress')} placeholder='Payee Address' /><br /><br />\n                    <Input name='paymentValue' onChange={(e) => this.handleChange(e, 'paymentValue')} placeholder='Value in Wei' /><br /><br />\n                </Modal>\n\n                <Modal\n                    title='Add Authority'\n                    visible={this.state.authVisible}\n                    onOk={this.handleAddAuth}\n                    onCancel={() => this.toggleModalVisible(false, 'authVisible')}\n                >\n                    <Input name='authName' onChange={(e) => this.handleChange(e, 'authName')} placeholder='Name' /><br /><br />\n                    <Input name='authAddr' onChange={(e) => this.handleChange(e, 'authAddr')} placeholder='Address' /><br /><br />\n                </Modal>\n            </div>\n        )\n    }\n}\n\nexport default MidAuth;"]},"metadata":{},"sourceType":"module"}
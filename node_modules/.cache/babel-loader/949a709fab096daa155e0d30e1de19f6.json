{"ast":null,"code":"import _Modal from \"antd/es/modal\";\nimport _AutoComplete from \"antd/es/auto-complete\";\nimport _Input from \"antd/es/input\";\nimport _Row from \"antd/es/row\";\nimport _Button from \"antd/es/button\";\nimport _Col from \"antd/es/col\";\nimport _message from \"antd/es/message\";\nimport _Typography from \"antd/es/typography\";\nvar _jsxFileName = \"/home/ad3sh/Documents/client/src/components/rootAuth.jsx\";\nimport React from 'react';\nimport { UserOutlined } from '@ant-design/icons';\nimport sha256 from \"crypto-js/sha256\";\nimport CryptoJS from \"crypto-js\";\nconst {\n  Title,\n  Paragraph,\n  Text\n} = _Typography;\nlet tokenkeys;\n\nclass RootAuth extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = async () => {\n      const {\n        contract\n      } = this.props.web3;\n      const accounts = this.props.acc;\n      console.log(accounts[0]);\n\n      try {\n        let l = [];\n        let map = {};\n        contract.methods.getAllListedAuthAddress().call({\n          from: accounts[0],\n          gas: 3000000\n        }).then(result => {\n          let i;\n          console.log(result);\n\n          for (i = 0; i < result.length; i++) {\n            let temp = result[i];\n            contract.methods.getSingleAuthDetails(temp).call({\n              from: accounts[0],\n              gas: 3000000\n            }).then(result => {\n              l.push({\n                'value': result['name']\n              });\n              map[result['name']] = temp;\n            });\n          }\n        });\n        this.setState({\n          labels: l\n        });\n        this.setState({\n          mapAuthNametoAddress: map\n        });\n        contract.methods.getAllTokenKeys().call({\n          from: accounts[0],\n          gas: 3000000\n        }).then(result => {\n          console.log(result);\n          tokenkeys = result;\n        }).then(() => {\n          let promises = [];\n          let i = 0;\n\n          for (i = 0; i < tokenkeys.length; i++) {\n            let value = tokenkeys[i];\n            promises.push(new Promise((resolve, reject) => {\n              contract.methods.getSingleTokenDetails(value).call({\n                from: accounts[0],\n                gas: 3000000\n              }).then(result => {\n                let temp;\n                temp = result.CompleteHistoryOfToken;\n\n                if (accounts[0].toLowerCase() == temp[temp.length - 1]._owner.toLowerCase()) {\n                  let t = this.state.tokensAtThisAddress;\n                  t.push({\n                    \"key\": value,\n                    \"value\": temp[temp.length - 1].value\n                  });\n                  this.setState({\n                    tokensAtThisAddress: t\n                  });\n                }\n              }).then(() => {\n                console.log('resolve');\n                resolve();\n              });\n            }));\n          }\n\n          Promise.all(promises).then(() => {\n            console.log('resolve All');\n            let total = 0;\n            let i = 0;\n\n            for (i = 0; i < this.state.tokensAtThisAddress.length; i++) {\n              total = total + parseInt(this.state.tokensAtThisAddress[i].value);\n            }\n\n            this.setState({\n              funds: total\n            }); // let temp = this.state.tokensAtThisAddress;\n            // temp.sort(function (a, b) {\n            //     return a.value.localeCompare(b.value);\n            // });\n            // this.setState(temp);\n\n            console.log(this.state.tokensAtThisAddress);\n          });\n        });\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        _message.error('Sorry TX was not successful Please refer console');\n\n        console.log('sad');\n        console.error(error);\n      }\n    };\n\n    this.handleUtilize = () => {\n      try {\n        const {\n          contract\n        } = this.props.web3;\n        const accounts = this.props.acc;\n\n        if (this.state.value > this.state.funds) {\n          _message.error('Insufficient Balance');\n        } else {\n          let i = 0;\n          let breakp;\n          let temp = 0;\n          let aim = this.state.value;\n          let currentbalance = this.state.funds;\n\n          for (i = 0; i < this.state.tokensAtThisAddress.length; i++) {\n            temp = temp + parseInt(this.state.tokensAtThisAddress[i].value);\n            console.log(temp);\n\n            if (temp >= aim) {\n              breakp = i;\n              break;\n            }\n          }\n\n          console.log(temp);\n\n          if (temp == aim) {\n            let k;\n            let before = this.state.funds;\n            let promises = [];\n\n            for (k = 0; k <= breakp; k++) {\n              promises.push(new Promise((resolve, reject) => {\n                contract.methods.transferToken(this.state.tokensAtThisAddress[k].key, '1', this.state.authority, this.state.purpose, this.state.mapAuthNametoAddress[this.state.authority]).send({\n                  from: accounts[0],\n                  gas: 3000000\n                }).then(receipt => {\n                  if (this.state.funds === before) {\n                    let newbal = this.state.funds - parseInt(aim);\n                    console.log(\"hello\");\n                    console.log(newbal);\n                    this.setState({\n                      funds: newbal\n                    });\n                  }\n                }).then(() => {\n                  resolve();\n                });\n              }));\n            }\n\n            Promise.all(promises).then(() => {\n              if (this.state.funds != before) {\n                let x = this.state.tokensAtThisAddress.slice(breakp + 1, this.state.tokensAtThisAddress.length);\n                this.setState({\n                  utilizeVisible: false\n                });\n                this.setState({\n                  tokensAtThisAddress: x\n                });\n              }\n            });\n          } else if (temp > aim) {\n            _message.success('There will be 2 TXs as we have to break the token in this case');\n\n            let t = temp - aim;\n            let requiredvaluedtoken = this.state.tokensAtThisAddress[breakp].value - t;\n            let uhash = sha256(accounts[0] + requiredvaluedtoken + Date.now());\n            uhash = uhash.toString(CryptoJS.enc.Hex);\n            contract.methods.breakToken(this.state.tokensAtThisAddress[breakp].key, requiredvaluedtoken, \"0x\" + uhash).send({\n              from: accounts[0],\n              gas: 3000000\n            }).then(() => {\n              let k;\n              let before = this.state.funds;\n              let promises = [];\n\n              for (k = 0; k <= breakp; k++) {\n                promises.push(new Promise((resolve, reject) => {\n                  contract.methods.transferToken(this.state.tokensAtThisAddress[k].key, '1', this.state.authority, this.state.purpose, this.state.mapAuthNametoAddress[this.state.authority]).send({\n                    from: accounts[0],\n                    gas: 3000000\n                  }).then(receipt => {\n                    if (this.state.funds === before) {\n                      let newbal = this.state.funds - parseInt(aim);\n                      console.log(\"hello\");\n                      console.log(newbal);\n                      this.setState({\n                        funds: newbal\n                      });\n                    }\n                  }).then(() => {\n                    resolve();\n                  });\n                }));\n              }\n\n              Promise.all(promises).then(() => {\n                if (this.state.funds != before) {\n                  contract.methods.getSingleTokenDetails(this.state.tokensAtThisAddress[breakp].key).call({\n                    from: accounts[0],\n                    gas: 3000000\n                  }).then(result => {\n                    let temp = result.CompleteHistoryOfToken;\n                    let add = temp[temp.length - 1].childtoken;\n                    let x = this.state.tokensAtThisAddress.slice(breakp + 1, this.state.tokensAtThisAddress.length);\n                    x.push({\n                      \"key\": add,\n                      \"value\": t\n                    });\n                    this.setState({\n                      utilizeVisible: false\n                    });\n                    this.setState({\n                      tokensAtThisAddress: x\n                    });\n                  });\n                }\n              });\n            });\n          }\n\n          console.log(this.state.purpose, parseInt(this.state.value), this.state.authority);\n        }\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        _message.error('Sorry TX was not successful Please refer console');\n\n        console.log('sad');\n        console.error(error);\n      } // if (false) {\n      //     // if the operation is unsuccessful\n      //     message.error('The Operation was unsuccessful');\n      // }\n\n    };\n\n    this.handleAddAuth = () => {\n      // console.log(this.state.authName, this.state.authAddr);\n      if (this.ifexists(this.state.authAddr, this.state.authName)) {\n        try {\n          const {\n            contract\n          } = this.props.web3;\n          const accounts = this.props.acc;\n          contract.methods.addAuthority(this.state.authName, this.state.authAddr).send({\n            from: accounts[0],\n            gas: 3000000\n          }).then(receipt => {\n            _message.success('New Authority Added Succesfully');\n\n            console.log(receipt);\n            let t = this.state.labels;\n            t.push({\n              'value': this.state.authName\n            });\n            this.setState({\n              labels: t\n            });\n            let t2 = this.state.mapAuthNametoAddress;\n            t2[this.state.authName] = this.state.authAddr;\n            this.setState({\n              mapAuthNametoAddress: t2\n            });\n            this.setState({\n              authName: '',\n              authAddr: ''\n            });\n          });\n        } catch (error) {\n          // Catch any errors for any of the above operations.\n          _message.error('Sorry TX was not successful Please refer console');\n\n          console.log('sad');\n          console.error(error);\n        }\n\n        this.toggleVisibleAuth(false);\n      }\n    };\n\n    this.handleChange = (e, name) => {\n      if (name == 'authority') this.setState({\n        [name]: e\n      });else this.setState({\n        [name]: e.target.value\n      });\n    };\n\n    this.toggleVisibleUtilize = bool => {\n      this.setState({\n        utilizeVisible: bool\n      });\n    };\n\n    this.toggleVisibleAuth = bool => {\n      this.setState({\n        authVisible: bool\n      });\n    };\n\n    this.state = {\n      utilizeVisible: false,\n      purpose: '',\n      value: '',\n      authority: '',\n      authName: '',\n      authAddr: '',\n      funds: '',\n      labels: [],\n      mapAuthNametoAddress: {},\n      tokensAtThisAddress: [],\n      refresh: 'false'\n    };\n  }\n\n  ifexists(add, name) {\n    let i = 0;\n\n    if (this.state.mapAuthNametoAddress.hasOwnProperty(name)) {\n      _message.error(\"Given Authority Name is Already Registered\");\n\n      return false;\n    }\n\n    for (const [key, value] of Object.entries(this.state.mapAuthNametoAddress)) {\n      if (add == value) {\n        _message.error(\"Given Authority Address is Already Registered\");\n\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"root-auth\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(_Row, {\n      justify: \"space-around\",\n      align: \"middle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(_Col, {\n      xs: 6,\n      sm: 6,\n      md: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Title, {\n      level: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 25\n      }\n    }, \"Root Authority\"), /*#__PURE__*/React.createElement(Paragraph, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 25\n      }\n    }, \"Root Authority is the one who owns the tokens initially\"), /*#__PURE__*/React.createElement(Paragraph, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 33\n      }\n    }, \"They can Allot the funds over to branch authorities by\", /*#__PURE__*/React.createElement(Text, {\n      code: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 33\n      }\n    }, \"Allot\")), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 33\n      }\n    }, \"They can add branch authorities by \", /*#__PURE__*/React.createElement(Text, {\n      code: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 72\n      }\n    }, \"Add Authority\"))))), /*#__PURE__*/React.createElement(_Col, {\n      xs: 18,\n      sm: 12,\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"fund-card\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"fund-card-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 29\n      }\n    }, \"Remaining Funds\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"fund-value\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 29\n      }\n    }, this.state.funds)), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 31\n      }\n    }), /*#__PURE__*/React.createElement(_Button, {\n      type: \"primary\",\n      onClick: () => this.toggleVisibleUtilize(true),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 25\n      }\n    }, \"Allot\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 31\n      }\n    }), /*#__PURE__*/React.createElement(_Button, {\n      type: \"primary\",\n      onClick: () => this.toggleVisibleAuth(true),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 25\n      }\n    }, \"Add Authority\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 31\n      }\n    }), /*#__PURE__*/React.createElement(Text, {\n      type: \"secondary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 25\n      }\n    }, \"Please note that if we have to break the token during allot, there are 2 transactions : 1)Breaking the token , 2)Allot\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(Text, {\n      type: \"secondary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 25\n      }\n    }, \"Please\"), \"  \", /*#__PURE__*/React.createElement(Text, {\n      type: \"danger\",\n      strong: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 63\n      }\n    }, \"confirm both transactions\"), \"  \", /*#__PURE__*/React.createElement(Text, {\n      type: \"secondary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 124\n      }\n    }, \"from wallet provider.\"))), /*#__PURE__*/React.createElement(_Modal, {\n      title: \"Allot Funds\",\n      visible: this.state.utilizeVisible,\n      onOk: this.handleUtilize,\n      onCancel: () => this.toggleVisibleUtilize(false),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(_Input, {\n      name: \"purpose\",\n      onChange: e => this.handleChange(e, 'purpose'),\n      value: this.state.purpose,\n      placeholder: \"Purpose\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 144\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 150\n      }\n    }), /*#__PURE__*/React.createElement(_Input, {\n      name: \"value\",\n      onChange: e => this.handleChange(e, 'value'),\n      value: this.state.value,\n      placeholder: \"Value\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 136\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 142\n      }\n    }), /*#__PURE__*/React.createElement(_AutoComplete, {\n      style: {\n        width: '100%'\n      },\n      options: this.state.labels,\n      placeholder: \"Authority Name\",\n      prefix: /*#__PURE__*/React.createElement(UserOutlined, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 33\n        }\n      }),\n      filterOption: (inputValue, option) => option.value.toUpperCase().indexOf(inputValue.toUpperCase()) !== -1,\n      value: this.state.authority,\n      onChange: e => this.handleChange(e, 'authority'),\n      name: \"authority\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 44\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 50\n      }\n    })), /*#__PURE__*/React.createElement(_Modal, {\n      title: \"Add Authority\",\n      visible: this.state.authVisible,\n      onOk: this.handleAddAuth,\n      onCancel: () => this.toggleVisibleAuth(false),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(_Input, {\n      name: \"authName\",\n      onChange: e => this.handleChange(e, 'authName'),\n      value: this.state.authName,\n      placeholder: \"Name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 144\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 150\n      }\n    }), /*#__PURE__*/React.createElement(_Input, {\n      name: \"authAddr\",\n      onChange: e => this.handleChange(e, 'authAddr'),\n      value: this.state.authAddr,\n      placeholder: \"Address\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 147\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 153\n      }\n    })));\n  }\n\n}\n\nexport default RootAuth;","map":{"version":3,"sources":["/home/ad3sh/Documents/client/src/components/rootAuth.jsx"],"names":["React","UserOutlined","sha256","CryptoJS","Title","Paragraph","Text","tokenkeys","RootAuth","Component","constructor","props","componentDidMount","contract","web3","accounts","acc","console","log","l","map","methods","getAllListedAuthAddress","call","from","gas","then","result","i","length","temp","getSingleAuthDetails","push","setState","labels","mapAuthNametoAddress","getAllTokenKeys","promises","value","Promise","resolve","reject","getSingleTokenDetails","CompleteHistoryOfToken","toLowerCase","_owner","t","state","tokensAtThisAddress","all","total","parseInt","funds","error","handleUtilize","breakp","aim","currentbalance","k","before","transferToken","key","authority","purpose","send","receipt","newbal","x","slice","utilizeVisible","success","requiredvaluedtoken","uhash","Date","now","toString","enc","Hex","breakToken","add","childtoken","handleAddAuth","ifexists","authAddr","authName","addAuthority","t2","toggleVisibleAuth","handleChange","e","name","target","toggleVisibleUtilize","bool","authVisible","refresh","hasOwnProperty","Object","entries","render","width","inputValue","option","toUpperCase","indexOf"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Modal, Button, Row, Col, AutoComplete, message, Input } from 'antd';\nimport { UserOutlined } from '@ant-design/icons';\nimport { Typography, Space } from 'antd';\nimport sha256 from \"crypto-js/sha256\";\nimport CryptoJS from \"crypto-js\";\n\nconst { Title, Paragraph, Text } = Typography;\n\nlet tokenkeys;\n\nclass RootAuth extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            utilizeVisible: false, purpose: '', value: '', authority: '', authName: '', authAddr: '', funds: '', labels: [],\n            mapAuthNametoAddress: {}, tokensAtThisAddress: [], refresh: 'false'\n        }\n\n    }\n    componentDidMount = async () => {\n\n\n        const { contract } = this.props.web3;\n        const accounts = this.props.acc;\n        console.log(accounts[0]);\n        try {\n            let l = [];\n            let map = {};\n            contract.methods.getAllListedAuthAddress().call({ from: accounts[0], gas: 3000000 })\n                .then((result) => {\n\n                    let i;\n                    console.log(result);\n                    for (i = 0; i < result.length; i++) {\n                        let temp = result[i];\n                        contract.methods.getSingleAuthDetails(temp).call({ from: accounts[0], gas: 3000000 })\n                            .then((result) => {\n                                l.push({ 'value': result['name'] })\n                                map[result['name']] = temp;\n                            })\n\n                    }\n\n                })\n            this.setState({ labels: l })\n            this.setState({ mapAuthNametoAddress: map })\n\n            contract.methods.getAllTokenKeys().call({ from: accounts[0], gas: 3000000 })\n                .then((result) => {\n                    console.log(result);\n                    tokenkeys = result\n                })\n                .then(() => {\n                    let promises = [];\n                    let i = 0;\n\n                    for (i = 0; i < tokenkeys.length; i++) {\n                        let value = tokenkeys[i];\n                        promises.push(\n                            new Promise((resolve, reject) => {\n                                contract.methods.getSingleTokenDetails(value).call({ from: accounts[0], gas: 3000000 })\n                                    .then((result) => {\n\n                                        let temp\n                                        temp = result.CompleteHistoryOfToken;\n                                        if (accounts[0].toLowerCase() == (temp[temp.length - 1]._owner).toLowerCase()) {\n                                            let t = this.state.tokensAtThisAddress;\n\n                                            t.push({ \"key\": value, \"value\": temp[temp.length - 1].value })\n\n                                            this.setState({ tokensAtThisAddress: t });\n                                        }\n\n                                    }).then(() => {\n                                        console.log('resolve')\n                                        resolve()\n                                    })\n                            }));\n\n\n                    }\n                    Promise.all(promises)\n                        .then(() => {\n\n                            console.log('resolve All')\n\n                            let total = 0;\n                            let i = 0;\n                            for (i = 0; i < this.state.tokensAtThisAddress.length; i++) {\n                                total = total + parseInt(this.state.tokensAtThisAddress[i].value);\n                            }\n                            this.setState({ funds: total })\n                            // let temp = this.state.tokensAtThisAddress;\n                            // temp.sort(function (a, b) {\n                            //     return a.value.localeCompare(b.value);\n                            // });\n                            // this.setState(temp);\n                            console.log(this.state.tokensAtThisAddress)\n\n\n                        })\n\n                })\n\n\n\n        } catch (error) {\n            // Catch any errors for any of the above operations.\n            message.error('Sorry TX was not successful Please refer console')\n            console.log('sad');\n            console.error(error);\n        }\n    };\n\n    handleUtilize = () => {\n\n        try {\n            const { contract } = this.props.web3;\n            const accounts = this.props.acc;\n            if (this.state.value > this.state.funds) { message.error('Insufficient Balance'); }\n            else {\n                let i = 0\n\n                let breakp;\n                let temp = 0;\n                let aim = this.state.value;\n                let currentbalance = this.state.funds;\n\n                for (i = 0; i < this.state.tokensAtThisAddress.length; i++) {\n                    temp = temp + parseInt(this.state.tokensAtThisAddress[i].value);\n                    console.log(temp)\n                    if (temp >= aim) {\n                        breakp = i;\n                        break;\n                    }\n                }\n                console.log(temp)\n\n\n                if (temp == aim) {\n                    let k;\n                    let before = this.state.funds;\n\n\n                    let promises = [];\n                    for (k = 0; k <= breakp; k++) {\n                        promises.push(\n                            new Promise((resolve, reject) => {\n                                contract.methods.transferToken(this.state.tokensAtThisAddress[k].key, '1', this.state.authority, this.state.purpose, this.state.mapAuthNametoAddress[this.state.authority]).send({ from: accounts[0], gas: 3000000 })\n                                    .then((receipt) => {\n                                        if (this.state.funds === before) {\n                                            let newbal = this.state.funds - parseInt(aim);\n                                            console.log(\"hello\");\n                                            console.log(newbal);\n                                            this.setState({ funds: newbal });\n                                        }\n\n                                    }).then(() => { resolve(); })\n                            }));\n                    }\n\n                    Promise.all(promises).then(() => {\n                        if (this.state.funds != before) {\n                            let x = this.state.tokensAtThisAddress.slice(breakp + 1, this.state.tokensAtThisAddress.length);\n                            this.setState({ utilizeVisible: false });\n                            this.setState({ tokensAtThisAddress: x });\n                        }\n                    })\n\n                }\n                else if (temp > aim) {\n                    message.success('There will be 2 TXs as we have to break the token in this case');\n                    let t = temp - aim;\n                    let requiredvaluedtoken = this.state.tokensAtThisAddress[breakp].value - t;\n                    let uhash = sha256(accounts[0] + requiredvaluedtoken + Date.now());\n                    uhash = uhash.toString(CryptoJS.enc.Hex);\n\n\n                    contract.methods.breakToken(this.state.tokensAtThisAddress[breakp].key, requiredvaluedtoken, \"0x\" + uhash).send({ from: accounts[0], gas: 3000000 })\n                        .then(() => {\n                            let k;\n                            let before = this.state.funds;\n                            let promises = [];\n                            for (k = 0; k <= breakp; k++) {\n                                promises.push(\n                                    new Promise((resolve, reject) => {\n                                        contract.methods.transferToken(this.state.tokensAtThisAddress[k].key, '1', this.state.authority, this.state.purpose, this.state.mapAuthNametoAddress[this.state.authority]).send({ from: accounts[0], gas: 3000000 })\n                                            .then((receipt) => {\n\n                                                if (this.state.funds === before) {\n                                                    let newbal = this.state.funds - parseInt(aim);\n                                                    console.log(\"hello\");\n                                                    console.log(newbal);\n                                                    this.setState({ funds: newbal });\n                                                }\n                                            }).then(() => { resolve(); })\n                                    }))\n                            }\n                            Promise.all(promises).then(() => {\n                                if (this.state.funds != before) {\n                                    contract.methods.getSingleTokenDetails(this.state.tokensAtThisAddress[breakp].key).call({ from: accounts[0], gas: 3000000 })\n                                        .then((result) => {\n\n                                            let temp = result.CompleteHistoryOfToken;\n                                            let add = temp[temp.length - 1].childtoken;\n                                            let x = this.state.tokensAtThisAddress.slice(breakp + 1, this.state.tokensAtThisAddress.length);\n                                            x.push({ \"key\": add, \"value\": t });\n                                            this.setState({ utilizeVisible: false });\n                                            this.setState({ tokensAtThisAddress: x });\n\n                                        })\n\n                                }\n                            })\n\n                        })\n                }\n                console.log(this.state.purpose, parseInt(this.state.value), this.state.authority);\n\n            }\n\n        }\n\n\n\n        catch (error) {\n            // Catch any errors for any of the above operations.\n            message.error('Sorry TX was not successful Please refer console')\n            console.log('sad');\n            console.error(error);\n        }\n\n\n\n        // if (false) {\n        //     // if the operation is unsuccessful\n        //     message.error('The Operation was unsuccessful');\n        // }\n    }\n\n    ifexists(add, name) {\n        let i = 0;\n\n        if (this.state.mapAuthNametoAddress.hasOwnProperty(name)) {\n            message.error(\"Given Authority Name is Already Registered\");\n            return false;\n        }\n\n        for (const [key, value] of Object.entries(this.state.mapAuthNametoAddress)) {\n            if (add == value) {\n                message.error(\"Given Authority Address is Already Registered\");\n                return false;\n            }\n        }\n        return true;\n\n    }\n    handleAddAuth = () => {\n\n        // console.log(this.state.authName, this.state.authAddr);\n\n        if (this.ifexists(this.state.authAddr, this.state.authName)) {\n            try {\n                const { contract } = this.props.web3;\n                const accounts = this.props.acc;\n\n                contract.methods.addAuthority(this.state.authName, this.state.authAddr).send({ from: accounts[0], gas: 3000000 })\n                    .then((receipt) => {\n\n                        message.success('New Authority Added Succesfully');\n                        console.log(receipt)\n                        let t = this.state.labels\n                        t.push({ 'value': this.state.authName })\n                        this.setState({ labels: t })\n\n                        let t2 = this.state.mapAuthNametoAddress\n                        t2[this.state.authName] = this.state.authAddr\n                        this.setState({ mapAuthNametoAddress: t2 })\n\n                        this.setState({ authName: '', authAddr: '' });\n\n                    })\n\n            } catch (error) {\n                // Catch any errors for any of the above operations.\n                message.error('Sorry TX was not successful Please refer console')\n                console.log('sad');\n                console.error(error);\n            }\n            this.toggleVisibleAuth(false);\n        }\n\n\n    }\n    handleChange = (e, name) => {\n        if (name == 'authority')\n            this.setState({ [name]: e });\n        else\n            this.setState({ [name]: e.target.value })\n    }\n    toggleVisibleUtilize = (bool) => {\n        this.setState({ utilizeVisible: bool })\n    }\n    toggleVisibleAuth = (bool) => {\n        this.setState({ authVisible: bool })\n    }\n    render() {\n        return (\n            <div className=\"root-auth\">\n                <Row justify=\"space-around\" align=\"middle\">\n                    <Col xs={6} sm={6} md={3}>\n\n                        <Title level={2}>Root Authority</Title>\n                        <Paragraph>\n                            Root Authority is the one who owns the tokens initially\n                        </Paragraph>\n                        <Paragraph>\n                            <ul>\n                                <li>\n                                    They can Allot the funds over to branch authorities by\n                                <Text code>Allot</Text>\n                                </li>\n                                <li>\n                                    They can add branch authorities by <Text code>Add Authority</Text>\n                                </li>\n                            </ul>\n                        </Paragraph>\n\n                    </Col>\n\n                    <Col xs={18} sm={12} md={12}>\n\n                        <div className=\"fund-card\">\n                            <div className=\"fund-card-title\">Remaining Funds</div>\n                            <div className=\"fund-value\">{this.state.funds}</div>\n                        </div>\n                        <br /><br />\n                        <Button type=\"primary\" onClick={() => this.toggleVisibleUtilize(true)}>Allot</Button>\n                        <br /><br />\n                        <Button type=\"primary\" onClick={() => this.toggleVisibleAuth(true)}>Add Authority</Button>\n                        <br /><br />\n                        <Text type=\"secondary\">Please note that if we have to break the token during allot, there are 2 transactions : 1)Breaking the token , 2)Allot</Text>\n                        <br />\n                        <Text type=\"secondary\">Please</Text>  <Text type=\"danger\" strong>confirm both transactions</Text>  <Text type=\"secondary\">from wallet provider.</Text>\n\n\n                    </Col>\n                </Row>\n\n                <Modal\n                    title=\"Allot Funds\"\n                    visible={this.state.utilizeVisible}\n                    onOk={this.handleUtilize}\n                    onCancel={() => this.toggleVisibleUtilize(false)}\n                >\n                    <Input name='purpose' onChange={(e) => this.handleChange(e, 'purpose')} value={this.state.purpose} placeholder='Purpose' /><br /><br />\n                    <Input name='value' onChange={(e) => this.handleChange(e, 'value')} value={this.state.value} placeholder='Value' /><br /><br />\n                    <AutoComplete\n                        style={{\n                            width: '100%',\n                        }}\n                        options={this.state.labels}\n                        placeholder=\"Authority Name\"\n                        prefix={<UserOutlined />}\n                        filterOption={(inputValue, option) =>\n                            option.value.toUpperCase().indexOf(inputValue.toUpperCase()) !== -1\n                        }\n                        value={this.state.authority}\n                        onChange={(e) => this.handleChange(e, 'authority')}\n                        name='authority' /><br /><br />\n                </Modal>\n\n                <Modal\n                    title='Add Authority'\n                    visible={this.state.authVisible}\n                    onOk={this.handleAddAuth}\n                    onCancel={() => this.toggleVisibleAuth(false)}\n                >\n                    <Input name='authName' onChange={(e) => this.handleChange(e, 'authName')} value={this.state.authName} placeholder='Name' /><br /><br />\n                    <Input name='authAddr' onChange={(e) => this.handleChange(e, 'authAddr')} value={this.state.authAddr} placeholder='Address' /><br /><br />\n                </Modal>\n\n            </div>\n        )\n    }\n}\n\nexport default RootAuth;"]},"metadata":{},"sourceType":"module"}
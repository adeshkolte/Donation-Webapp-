{"ast":null,"code":"import _Table from \"antd/es/table\";\nimport _Button from \"antd/es/button\";\nimport _Input from \"antd/es/input\";\nimport _message from \"antd/es/message\";\nimport _List from \"antd/es/list\";\nimport _Typography from \"antd/es/typography\";\nvar _jsxFileName = \"/home/ad3sh/Documents/Aid Donation/client/src/components/track.jsx\";\nimport React from 'react';\nimport Q from 'q';\nimport { Graph } from \"react-d3-graph\";\nconst {\n  Paragraph\n} = _Typography;\nconst {\n  Title,\n  Text\n} = _Typography;\nconst myConfig = {\n  nodeHighlightBehavior: true,\n  linkHighlightBehavior: true,\n  directed: true,\n  height: \"300\",\n  width: \"750\",\n  d3: {\n    gravity: -500 // linkLength: 600,\n\n  },\n  node: {\n    color: \"lightgreen\",\n    size: 400,\n    highlightStrokeColor: \"green\",\n    fontSize: 14\n  },\n  link: {\n    color: \"#001529\",\n    highlightColor: \"lightgreen\",\n    fontSize: 16,\n    renderLabel: true,\n    labelProperty: \"label\"\n  }\n};\nconst columns = [{\n  title: 'From',\n  dataIndex: 'from',\n  key: 'from'\n}, {\n  title: 'To',\n  dataIndex: 'to',\n  key: 'to'\n}, {\n  title: 'Purpose',\n  dataIndex: 'purpose',\n  key: 'purpose'\n}, {\n  title: 'Amount',\n  dataIndex: 'amount',\n  key: 'amount'\n}];\nconst columns2 = [{\n  title: 'Donor, Payer, Tax Payer',\n  dataIndex: 'donor',\n  key: 'donor'\n}, {\n  title: 'Total Payment',\n  dataIndex: 'totalfunds',\n  key: 'totalfunds'\n}, {\n  title: 'Child Tokens',\n  dataIndex: 'childtokens',\n  key: 'childtokens',\n  render: list => /*#__PURE__*/React.createElement(_List, {\n    size: \"small\",\n    dataSource: list,\n    renderItem: item => /*#__PURE__*/React.createElement(_List.Item, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 33\n      }\n    }, \"  \", /*#__PURE__*/React.createElement(Paragraph, {\n      copyable: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 46\n      }\n    }, item)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 25\n    }\n  })\n}];\nlet childmap = {};\n\nclass Track extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = e => {\n      var name = e.target.name;\n      this.setState({\n        [name]: e.target.value\n      });\n    };\n\n    this.recursion = (contract, accounts, data, linkvalue, add, ifnodeexist, fundsatnode) => {\n      // console.log('asda');\n      // this.count++;\n      if (add != '0x0000000000000000000000000000000000000000000000000000000000000000') {\n        if (Object.keys(ifnodeexist).length != 0) {\n          let t = this.state.childTokenList;\n          t.push(add);\n          this.setState({\n            childTokenList: t\n          });\n        }\n\n        contract.methods.getSingleTokenDetails(add).call({\n          from: accounts[0],\n          gas: 3000000\n        }).then(result => {\n          let history = result[0];\n          let i = 0; // console.log(history);\n\n          let singleinstance;\n          let parent = 'null';\n          console.log(history);\n\n          for (i = 0; i < history.length; i++) {\n            singleinstance = history[i]; //0xd3033d0ae74eda8e29ea100d113c77db67518955a239113006a48cbd67df847b\n\n            if (!ifnodeexist.hasOwnProperty(singleinstance[2])) {\n              if (singleinstance[1] == 0) {\n                data.nodes.push({\n                  'id': singleinstance[2],\n                  'symbolType': \"diamond\",\n                  x: 375,\n                  y: 5\n                });\n              } else if (singleinstance[1] == 1) {\n                data.nodes.push({\n                  'id': singleinstance[2]\n                });\n              } else if (singleinstance[1] == 2) {\n                data.nodes.push({\n                  'id': singleinstance[2]\n                });\n              }\n\n              ifnodeexist[singleinstance[2]] = true;\n              fundsatnode[singleinstance[2]] = 0;\n            }\n\n            let j = i;\n            let flag = 1;\n            let temp = history;\n\n            if (j < temp.length - 1 && temp[j].nameOfOwner == temp[j + 1].nameOfOwner) {\n              flag = 0;\n            }\n\n            if (flag == 1) {\n              fundsatnode[singleinstance[2]] = parseInt(fundsatnode[singleinstance[2]]) + parseInt(singleinstance.value);\n            }\n\n            if (i < temp.length - 1) {\n              if (temp[j].nameOfOwner != temp[j + 1].nameOfOwner) {\n                let link = temp[j].nameOfOwner + temp[j + 1].nameOfOwner;\n\n                if (linkvalue.hasOwnProperty(link)) {\n                  linkvalue[link].totalvalue = parseInt(linkvalue[link].totalvalue) + parseInt(temp[j + 1].value);\n                  if (!linkvalue[link].purposes.hasOwnProperty(temp[j + 1].purpose)) linkvalue[link].purposes[temp[j + 1].purpose] = 0;\n                  linkvalue[link].purposes[temp[j + 1].purpose] = parseInt(linkvalue[link].purposes[temp[j + 1].purpose]) + parseInt(temp[j + 1].value);\n                } else {\n                  linkvalue[link] = {\n                    'source': temp[j].nameOfOwner,\n                    'target': temp[j + 1].nameOfOwner,\n                    'totalvalue': parseInt(temp[j + 1].value),\n                    'purposes': {\n                      [temp[j + 1].purpose]: parseInt(temp[j + 1].value)\n                    }\n                  };\n                }\n              }\n\n              if (!childmap.hasOwnProperty(singleinstance.childtoken)) {\n                childmap[singleinstance.childtoken] = true;\n                console.log(singleinstance.childtoken, \"----asd\");\n                this.recursion(contract, accounts, data, linkvalue, singleinstance.childtoken, ifnodeexist, fundsatnode);\n              }\n            }\n          }\n        }); // this.count--;\n        // console.log(this.count);\n        // if (this.count === 0 && callback) callback();\n      }\n    };\n\n    this.handleTrack = () => {\n      this.setState({\n        childTokenList: []\n      });\n      let graph = {\n        nodes: [],\n        links: []\n      };\n\n      try {\n        const {\n          accounts,\n          contract\n        } = this.props.web3;\n        let linkvalue = {};\n        let startadd = this.state.tokenSearch;\n        let fundsatnode = {};\n        this.setState({\n          data: {\n            nodes: [{\n              id: 'Loading...',\n              x: 375,\n              y: 30\n            }],\n            links: []\n          }\n        });\n        childmap = {};\n        this.recursion(contract, accounts, graph, linkvalue, startadd, {}, fundsatnode);\n        setTimeout(() => {\n          console.log(linkvalue);\n          let tempdatatable = [];\n          let infotable = [];\n          let i = 0;\n\n          for (const [key, value] of Object.entries(linkvalue)) {\n            let label;\n            label = JSON.stringify(value.purposes);\n            let purp = value.purposes;\n            let totalforonelink = 0;\n            console.log(value.source);\n\n            for (const [k, v] of Object.entries(purp)) {\n              console.log(value.source);\n              tempdatatable.push({\n                key: `${i}`,\n                from: value.source,\n                to: value.target,\n                purpose: k,\n                amount: v\n              });\n              totalforonelink += v;\n            }\n\n            graph.links.push({\n              source: value.source,\n              target: value.target,\n              label: totalforonelink\n            });\n          }\n\n          this.setState({\n            data: graph\n          });\n          this.setState({\n            fundsatnode: fundsatnode\n          });\n          this.setState({\n            donorname: Object.keys(fundsatnode)[0]\n          });\n          this.setState({\n            totalfunds: fundsatnode[Object.keys(fundsatnode)[0]]\n          });\n          this.setState({\n            infotabledata: [{\n              key: \"1\",\n              donor: this.state.donorname,\n              totalfunds: this.state.totalfunds,\n              childtokens: this.state.childTokenList\n            }]\n          });\n          this.setState({\n            tabledata: tempdatatable\n          });\n          console.log(graph);\n          console.log(fundsatnode);\n        }, 3300);\n        console.log(this.state.trackArray);\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        _message.error('Sorry TX was not successful Please refer console');\n\n        console.log('sad');\n        console.error(error);\n      }\n    };\n\n    this.state = {\n      timelineVisible: 'none',\n      tokenSearch: '',\n      trackArray: [],\n      totalcalls: 0,\n      data: {\n        nodes: [{\n          id: 'Please enter your token key',\n          x: 375,\n          y: 30\n        }],\n        links: []\n      },\n      donorname: \"NA\",\n      totalfunds: 0,\n      childTokenList: [],\n      infotabledata: [],\n      tabledata: []\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"track\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(_Input, {\n      className: \"token-inp\",\n      name: \"tokenSearch\",\n      value: this.state.value,\n      onChange: this.handleChange,\n      placeholder: \"Enter token to track\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 160\n      }\n    }), /*#__PURE__*/React.createElement(_Button, {\n      className: \"track-btn\",\n      type: \"primary\",\n      onClick: this.handleTrack,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 21\n      }\n    }, \"Track\"), /*#__PURE__*/React.createElement(Graph, {\n      id: \"graph-id\" // id is mandatory, if no id is defined rd3g will throw an error\n      ,\n      data: this.state.data,\n      config: myConfig // onClickNode={this.onClickNode}\n      // onClickLink={this.onClickLink}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"trackdata\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"data-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(_Table, {\n      columns: columns2,\n      dataSource: this.state.infotabledata,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(_Table, {\n      columns: columns,\n      dataSource: this.state.tabledata,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 21\n      }\n    })));\n  }\n\n}\n\nexport default Track;","map":{"version":3,"sources":["/home/ad3sh/Documents/Aid Donation/client/src/components/track.jsx"],"names":["React","Q","Graph","Paragraph","Title","Text","myConfig","nodeHighlightBehavior","linkHighlightBehavior","directed","height","width","d3","gravity","node","color","size","highlightStrokeColor","fontSize","link","highlightColor","renderLabel","labelProperty","columns","title","dataIndex","key","columns2","render","list","item","childmap","Track","Component","constructor","props","handleChange","e","name","target","setState","value","recursion","contract","accounts","data","linkvalue","add","ifnodeexist","fundsatnode","Object","keys","length","t","state","childTokenList","push","methods","getSingleTokenDetails","call","from","gas","then","result","history","i","singleinstance","parent","console","log","hasOwnProperty","nodes","x","y","j","flag","temp","nameOfOwner","parseInt","totalvalue","purposes","purpose","childtoken","handleTrack","graph","links","web3","startadd","tokenSearch","id","setTimeout","tempdatatable","infotable","entries","label","JSON","stringify","purp","totalforonelink","source","k","v","to","amount","donorname","totalfunds","infotabledata","donor","childtokens","tabledata","trackArray","error","timelineVisible","totalcalls"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Timeline, Input, Button, Col, Row } from 'antd';\nimport { message } from 'antd';\nimport Q from 'q';\nimport { Graph } from \"react-d3-graph\";\nimport { Table, Tag, Space } from 'antd';\nimport { Typography, List } from 'antd';\nconst { Paragraph } = Typography;\n\n\nconst { Title, Text } = Typography;\nconst myConfig = {\n    nodeHighlightBehavior: true,\n    linkHighlightBehavior: true,\n    directed: true,\n    height: \"300\",\n    width: \"750\",\n    d3: {\n        gravity: -500,\n        // linkLength: 600,\n    },\n\n    node: {\n        color: \"lightgreen\",\n        size: 400,\n        highlightStrokeColor: \"green\",\n        fontSize: 14,\n\n    },\n    link: {\n        color: \"#001529\",\n        highlightColor: \"lightgreen\",\n        fontSize: 16,\n        renderLabel: true,\n        labelProperty: \"label\",\n    },\n};\n\nconst columns = [\n    {\n        title: 'From',\n        dataIndex: 'from',\n        key: 'from',\n\n    },\n    {\n        title: 'To',\n        dataIndex: 'to',\n        key: 'to',\n    },\n    {\n        title: 'Purpose',\n        dataIndex: 'purpose',\n        key: 'purpose',\n\n    },\n    {\n        title: 'Amount',\n        dataIndex: 'amount',\n        key: 'amount',\n    },\n\n\n];\nconst columns2 = [\n    {\n        title: 'Donor, Payer, Tax Payer',\n        dataIndex: 'donor',\n        key: 'donor',\n\n    },\n    {\n        title: 'Total Payment',\n        dataIndex: 'totalfunds',\n        key: 'totalfunds',\n    },\n    {\n        title: 'Child Tokens',\n        dataIndex: 'childtokens',\n        key: 'childtokens',\n        render: list => <List\n            size=\"small\"\n            dataSource={list}\n            renderItem={item => <List.Item>  <Paragraph copyable>{item}</Paragraph></List.Item>}\n        />,\n    },\n\n\n\n];\n\nlet childmap = {};\nclass Track extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            timelineVisible: 'none', tokenSearch: '', trackArray: [], totalcalls: 0, data: {\n                nodes: [{\n                    id: 'Please enter your token key', x: 375,\n                    y: 30\n                }], links: []\n            },\n            donorname: \"NA\",\n            totalfunds: 0,\n            childTokenList: [],\n            infotabledata: [],\n            tabledata: [],\n        }\n    }\n    handleChange = e => {\n        var name = e.target.name;\n        this.setState({ [name]: e.target.value });\n    }\n\n\n    recursion = (contract, accounts, data, linkvalue, add, ifnodeexist, fundsatnode) => {\n        // console.log('asda');\n        // this.count++;\n\n        if (add != '0x0000000000000000000000000000000000000000000000000000000000000000') {\n\n\n            if (Object.keys(ifnodeexist).length != 0) {\n                let t = this.state.childTokenList;\n                t.push(add);\n                this.setState({ childTokenList: t });\n\n            }\n            contract.methods.getSingleTokenDetails(add).call({ from: accounts[0], gas: 3000000, })\n                .then((result) => {\n                    let history = result[0]\n                    let i = 0;\n                    // console.log(history);\n                    let singleinstance;\n                    let parent = 'null'\n                    console.log(history);\n\n                    for (i = 0; i < history.length; i++) {\n                        singleinstance = history[i];\n                        //0xd3033d0ae74eda8e29ea100d113c77db67518955a239113006a48cbd67df847b\n\n                        if (!ifnodeexist.hasOwnProperty(singleinstance[2])) {\n                            if (singleinstance[1] == 0) {\n                                data.nodes.push({\n                                    'id': singleinstance[2],\n                                    'symbolType': \"diamond\",\n                                    x: 375,\n                                    y: 5,\n                                })\n                            }\n                            else if (singleinstance[1] == 1) {\n                                data.nodes.push({\n                                    'id': singleinstance[2]\n\n                                })\n                            }\n                            else if (singleinstance[1] == 2) {\n                                data.nodes.push({\n                                    'id': singleinstance[2],\n\n                                })\n                            }\n                            ifnodeexist[singleinstance[2]] = true;\n                            fundsatnode[singleinstance[2]] = 0;\n                        }\n                        let j = i;\n                        let flag = 1;\n                        let temp = history;\n\n                        if (j < temp.length - 1 && temp[j].nameOfOwner == temp[j + 1].nameOfOwner) {\n                            flag = 0;\n                        }\n                        if (flag == 1) {\n\n                            fundsatnode[singleinstance[2]] = parseInt(fundsatnode[singleinstance[2]]) + parseInt(singleinstance.value);\n                        }\n\n\n                        if (i < temp.length - 1) {\n                            if (temp[j].nameOfOwner != temp[j + 1].nameOfOwner) {\n\n                                let link = temp[j].nameOfOwner + temp[j + 1].nameOfOwner;\n                                if (linkvalue.hasOwnProperty(link)) {\n\n                                    linkvalue[link].totalvalue = parseInt(linkvalue[link].totalvalue) + parseInt(temp[j + 1].value);\n                                    if (!linkvalue[link].purposes.hasOwnProperty(temp[j + 1].purpose)) linkvalue[link].purposes[temp[j + 1].purpose] = 0;\n                                    linkvalue[link].purposes[temp[j + 1].purpose] = parseInt(linkvalue[link].purposes[temp[j + 1].purpose]) + parseInt(temp[j + 1].value);\n\n                                }\n                                else {\n\n                                    linkvalue[link] = {\n                                        'source': temp[j].nameOfOwner,\n                                        'target': temp[j + 1].nameOfOwner,\n                                        'totalvalue': parseInt(temp[j + 1].value),\n                                        'purposes': {\n                                            [temp[j + 1].purpose]: parseInt(temp[j + 1].value)\n                                        }\n                                    }\n                                }\n                            }\n                            if (!childmap.hasOwnProperty(singleinstance.childtoken)) {\n                                childmap[singleinstance.childtoken] = true;\n                                console.log(singleinstance.childtoken, \"----asd\");\n                                this.recursion(contract, accounts, data, linkvalue, singleinstance.childtoken, ifnodeexist, fundsatnode);\n                            }\n\n\n                        }\n\n\n                    }\n\n\n                });\n\n            // this.count--;\n            // console.log(this.count);\n            // if (this.count === 0 && callback) callback();\n\n\n        }\n\n    }\n    handleTrack = () => {\n        this.setState({ childTokenList: [] })\n        let graph = {\n            nodes: [], links: []\n        }\n\n        try {\n            const { accounts, contract } = this.props.web3;\n            let linkvalue = {}\n            let startadd = this.state.tokenSearch\n            let fundsatnode = {}\n            this.setState({\n                data: {\n                    nodes: [{\n                        id: 'Loading...', x: 375,\n                        y: 30\n                    }], links: []\n                }\n            })\n            childmap = {};\n            this.recursion(contract, accounts, graph, linkvalue, startadd, {}, fundsatnode);\n\n\n            setTimeout(() => {\n                console.log(linkvalue);\n                let tempdatatable = [];\n                let infotable = []\n                let i = 0;\n                for (const [key, value] of Object.entries(linkvalue)) {\n                    let label;\n                    label = JSON.stringify(value.purposes);\n                    let purp = value.purposes\n                    let totalforonelink = 0;\n                    console.log(value.source);\n                    for (const [k, v] of Object.entries(purp)) {\n                        console.log(value.source);\n                        tempdatatable.push({\n                            key: `${i}`,\n                            from: value.source,\n                            to: value.target,\n                            purpose: k,\n                            amount: v,\n                        });\n                        totalforonelink += v;\n                    }\n                    graph.links.push({\n                        source: value.source,\n                        target: value.target,\n                        label: totalforonelink,\n                    });\n                }\n\n                this.setState({ data: graph });\n                this.setState({ fundsatnode: fundsatnode });\n\n                this.setState({ donorname: Object.keys(fundsatnode)[0] });\n                this.setState({ totalfunds: fundsatnode[Object.keys(fundsatnode)[0]] });\n\n                this.setState({\n                    infotabledata: [{\n                        key: \"1\",\n                        donor: this.state.donorname,\n                        totalfunds: this.state.totalfunds,\n                        childtokens: this.state.childTokenList,\n                    }]\n                })\n                this.setState({ tabledata: tempdatatable });\n                console.log(graph);\n                console.log(fundsatnode)\n            }, 3300);\n            console.log(this.state.trackArray);\n\n\n\n        } catch (error) {\n            // Catch any errors for any of the above operations.\n            message.error('Sorry TX was not successful Please refer console')\n            console.log('sad');\n            console.error(error);\n        }\n\n    }\n    render() {\n\n        return (\n            <div>\n                <div className=\"track\">\n\n\n                    <Input className='token-inp' name='tokenSearch' value={this.state.value} onChange={this.handleChange} placeholder='Enter token to track' /><br />\n                    <Button className='track-btn' type=\"primary\" onClick={this.handleTrack}>Track</Button>\n\n                    <Graph\n                        id=\"graph-id\" // id is mandatory, if no id is defined rd3g will throw an error\n                        data={this.state.data}\n                        config={myConfig}\n                    // onClickNode={this.onClickNode}\n                    // onClickLink={this.onClickLink}\n                    />\n                </div>\n                <div className=\"trackdata\">\n                    <div className=\"data-title\">\n                        {/* <Text strong>Tracking Details</Text> */}\n                    </div>\n                    <Table columns={columns2} dataSource={this.state.infotabledata} />\n                    <Table columns={columns} dataSource={this.state.tabledata} />\n                </div>\n            </div >\n        )\n    }\n}\n\nexport default Track;"]},"metadata":{},"sourceType":"module"}